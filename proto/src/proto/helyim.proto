syntax = "proto3";

package helyim;

//////////////////////////////////////////////////

service Helyim {
  rpc Heartbeat(stream HeartbeatRequest) returns (stream HeartbeatResponse) {}
  rpc LookupVolume (LookupVolumeRequest) returns (LookupVolumeResponse) {}
  rpc LookupEcVolume (LookupEcVolumeRequest) returns (LookupEcVolumeResponse) {}
}

//////////////////////////////////////////////////

message HeartbeatRequest {
  string ip = 1;
  uint32 port = 2;
  string public_url = 3;
  uint32 max_volume_count = 4;
  uint64 max_file_key = 5;
  string data_center = 6;
  string rack = 7;
  uint32 admin_port = 8;
  repeated VolumeInformationMessage volumes = 9;
  // delta volumes
  repeated VolumeShortInformationMessage new_volumes = 10;
  repeated VolumeShortInformationMessage deleted_volumes = 11;
  bool has_no_volumes = 12;

  // erasure coding
  repeated VolumeEcShardInformationMessage ec_shards = 13;
  // delta erasure coding shards
  repeated VolumeEcShardInformationMessage new_ec_shards = 14;
  repeated VolumeEcShardInformationMessage deleted_ec_shards = 15;
  bool has_no_ec_shards = 16;
}
message HeartbeatResponse {
  uint64 volume_size_limit = 1;
  string secret_key = 2;
  string leader = 3;
  // raft peers
  repeated string peers = 4;
}

message VolumeInformationMessage {
  uint32 id = 1;
  uint64 size = 2;
  string collection = 3;
  uint64 file_count = 4;
  uint64 delete_count = 5;
  uint64 deleted_bytes = 6;
  bool read_only = 7;
  uint32 replica_placement = 8;
  uint32 version = 9;
  uint32 ttl = 10;
}

message VolumeShortInformationMessage {
  uint32 id = 1;
  string collection = 2;
  uint32 replica_placement = 3;
  uint32 version = 4;
  uint32 ttl = 5;
}

message VolumeEcShardInformationMessage {
  uint32 id = 1;
  string collection = 2;
  uint32 ec_index_bits = 3;
}

message LookupVolumeRequest {
  repeated string volumes = 1;
  string collection = 2;
}

message LookupVolumeResponse {
  message VolumeLocation {
    uint32 volumeId = 1;
    repeated Location locations = 2;
    string error = 3;
  }
  repeated VolumeLocation volumeLocations = 1;
}

message Location {
  string url = 1;
  string public_url = 2;
}

message LookupEcVolumeRequest {
  uint32 volume_id = 1;
}
message LookupEcVolumeResponse {
  uint32 volume_id = 1;
  message EcShardIdLocation {
    uint32 shard_id = 1;
    repeated Location locations = 2;
  }
  repeated EcShardIdLocation shard_id_locations = 2;
}