syntax = "proto3";
package volume;

service VolumeServer {
  rpc AllocateVolume (AllocateVolumeRequest) returns (AllocateVolumeResponse) {}
  rpc VolumeDelete (VolumeDeleteRequest) returns (VolumeDeleteResponse) {}
  rpc VolumeMarkReadonly (VolumeMarkReadonlyRequest) returns (VolumeMarkReadonlyResponse) {}

  // vacuum
  rpc VacuumVolumeCheck (VacuumVolumeCheckRequest) returns (VacuumVolumeCheckResponse) {}
  rpc VacuumVolumeCompact (VacuumVolumeCompactRequest) returns (VacuumVolumeCompactResponse) {}
  rpc VacuumVolumeCommit (VacuumVolumeCommitRequest) returns (VacuumVolumeCommitResponse) {}
  rpc VacuumVolumeCleanup (VacuumVolumeCleanupRequest) returns (VacuumVolumeCleanupResponse) {}

  // erasure coding
  rpc VolumeEcShardsGenerate (VolumeEcShardsGenerateRequest) returns (VolumeEcShardsGenerateResponse) {}
  rpc VolumeEcShardsRebuild (VolumeEcShardsRebuildRequest) returns (VolumeEcShardsRebuildResponse) {}
  rpc VolumeEcShardsCopy (VolumeEcShardsCopyRequest) returns (VolumeEcShardsCopyResponse) {}
  rpc VolumeEcShardsDelete (VolumeEcShardsDeleteRequest) returns (VolumeEcShardsDeleteResponse) {}
  rpc VolumeEcShardsMount (VolumeEcShardsMountRequest) returns (VolumeEcShardsMountResponse) {}
  rpc VolumeEcShardsUnmount (VolumeEcShardsUnmountRequest) returns (VolumeEcShardsUnmountResponse) {}
  rpc VolumeEcShardRead (VolumeEcShardReadRequest) returns (stream VolumeEcShardReadResponse) {}
  rpc VolumeEcBlobDelete (VolumeEcBlobDeleteRequest) returns (VolumeEcBlobDeleteResponse) {}
  rpc VolumeEcShardsToVolume (VolumeEcShardsToVolumeRequest) returns (VolumeEcShardsToVolumeResponse) {}
}

message AllocateVolumeRequest {
  uint32 volume_id = 1;
  string collection = 2;
  string replication = 3;
  string ttl = 4;
  int64 preallocate = 5;
}
message AllocateVolumeResponse {
}

message VacuumVolumeCheckRequest {
  uint32 volume_id = 1;
}
message VacuumVolumeCheckResponse {
  double garbage_ratio = 1;
}

message VacuumVolumeCompactRequest {
  uint32 volume_id = 1;
  uint64 preallocate = 2;
}
message VacuumVolumeCompactResponse {
}

message VacuumVolumeCommitRequest {
  uint32 volume_id = 1;
}
message VacuumVolumeCommitResponse {
}

message VacuumVolumeCleanupRequest {
  uint32 volume_id = 1;
}
message VacuumVolumeCleanupResponse {
}

// tired storage on volume servers
message RemoteFile {
  string backend_type = 1;
  string backend_id = 2;
  string key = 3;
  uint64 offset = 4;
  uint64 file_size = 5;
  uint64 modified_time = 6;
  string extension = 7;
}
message VolumeInfo {
  repeated RemoteFile files = 1;
  uint32 version = 2;
  string replication = 3;
}

// erasure coding
message VolumeEcShardsGenerateRequest {
  uint32 volume_id = 1;
  string collection = 2;
}
message VolumeEcShardsGenerateResponse {
}

message VolumeEcShardsRebuildRequest {
  uint32 volume_id = 1;
  string collection = 2;
}
message VolumeEcShardsRebuildResponse {
  repeated uint32 rebuilt_shard_ids = 1;
}

message VolumeEcShardsCopyRequest {
  uint32 volume_id = 1;
  string collection = 2;
  repeated uint32 shard_ids = 3;
  bool copy_ecx_file = 4;
  string source_data_node = 5;
  bool copy_ecj_file = 6;
  bool copy_vif_file = 7;
}
message VolumeEcShardsCopyResponse {
}

message VolumeEcShardsDeleteRequest {
  uint32 volume_id = 1;
  string collection = 2;
  repeated uint32 shard_ids = 3;
}
message VolumeEcShardsDeleteResponse {
}

message VolumeEcShardsMountRequest {
  uint32 volume_id = 1;
  string collection = 2;
  repeated uint32 shard_ids = 3;
}
message VolumeEcShardsMountResponse {
}

message VolumeEcShardsUnmountRequest {
  uint32 volume_id = 1;
  repeated uint32 shard_ids = 3;
}
message VolumeEcShardsUnmountResponse {
}

message VolumeEcShardReadRequest {
  uint32 volume_id = 1;
  uint32 shard_id = 2;
  int64 offset = 3;
  int64 size = 4;
  uint64 file_key = 5;
}
message VolumeEcShardReadResponse {
  bytes data = 1;
  bool is_deleted = 2;
}

message VolumeEcBlobDeleteRequest {
  uint32 volume_id = 1;
  string collection = 2;
  uint64 file_key = 3;
  uint32 version = 4;
}
message VolumeEcBlobDeleteResponse {
}

message VolumeEcShardsToVolumeRequest {
  uint32 volume_id = 1;
  string collection = 2;
}
message VolumeEcShardsToVolumeResponse {
}

message VolumeDeleteRequest {
  uint32 volume_id = 1;
}
message VolumeDeleteResponse {
}

message VolumeMarkReadonlyRequest {
  uint32 volume_id = 1;
}
message VolumeMarkReadonlyResponse {
}